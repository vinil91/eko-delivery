{"version":3,"sources":["components/CaseLabel/CaseLabel.jsx","redux/actions/actions.js","redux/actions/actionTypes.js","components/Content/Content.jsx","components/Footer/Footer.jsx","components/Form/Form.jsx","components/Form/FormWithStops.jsx","components/Header/Header.jsx","components/Loader/Loader.jsx","components/Route/Route.jsx","models/Edge.js","helpers/parser.js","models/Graph.js","components/RoutesList/RoutesList.jsx","components/Stats/Stats.jsx","components/Workspace/Cases/CaseOne.jsx","components/Workspace/Cases/CaseTwo.jsx","components/Workspace/Cases/CaseThree.jsx","components/Workspace/case-data.js","components/Workspace/Workspace.jsx","App.jsx","redux/reducers/graph.js","redux/reducers/userInput.js","redux/rootReducer.js","redux/reducers/currentCase.js","index.js","components/Header/task.pdf"],"names":["cl","block","CaseLabel","isChecked","onChoose","caseItem","id","name","title","className","key","checked","htmlFor","type","value","onChange","event","currentCase","target","defaultProps","description","connect","state","graph","dispatch","payload","setCase","atLeastOneEdge","edges","length","Footer","f","Form","caseAB","caseForm","placeholder","onEnter","useState","setValue","onSubmit","preventDefault","maxLength","undefined","curValue","toUpperCase","replace","FormWithStops","route","setRoute","stops","setStops","size","curStops","curRoute","b","Header","onClick","src","Pdf","width","height","l","Loader","isLoading","element","useRef","CSSTransition","in","timeout","classNames","current","lottie","loadAnimation","container","renderer","loop","autoplay","animationData","trainAnimation","unmountOnExit","ref","r","Route","start","end","cost","Edge","weight","this","match","parseInt","parser","data","split","map","substring","Graph","vertexes","forEach","edge","indexOf","push","fromPoint","toPoint","discussingVertexes","distances","previous","vertex","Infinity","currentMinValue","currentVertex","i","pull","filter","alternativeDistance","charAt","pricesOfSuitableStarts","dijkstra","bestPath","min","path","stopsArray","pointA","pointB","suitableZone","find","passedWay","currentPoint","finishPoint","ceiling","passedWayWithCurrentPoint","reduce","sum","countTrips","maxStops","wp","rl","RoutesList","enteredLine","isWronglyParsed","onReset","nodes","correctParsedNodes","node","userInput","setGraph","s","Stats","routes","cities","CaseOne","caseInfo","calculatingRoute","setCalculatingRoute","countPathWeight","CaseTwo","calculatingStops","setCalculatingStops","countTripsWithLessThanNStops","Number","CaseThree","findBestPath","caseData","curCase","renderCurrentCase","App","setIsLoading","useEffect","setTimeout","initialState","combineReducers","action","store","createStore","rootReducer","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.8988c1e0.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { block } from 'bem-cn';\r\n\r\nimport { setCase } from '../../redux/actions/actions';\r\n\r\nimport './CaseLabel.css';\r\n\r\nconst cl = block('case-label');\r\n\r\nfunction CaseLabel({ isChecked, onChoose, caseItem: { id, name, title } }) {\r\n  const handleCaseChoose = (event) => {\r\n    const currentCase = event.target.value;\r\n    onChoose(currentCase);\r\n  }\r\n\r\n  return (\r\n    <li className={cl()} key={id}>\r\n      <label className={cl('info-container', { checked: isChecked })} htmlFor={id}>\r\n        <input\r\n          className={cl('input')}\r\n          type=\"radio\"\r\n          name=\"currentCase\"\r\n          id={id}\r\n          value={id}\r\n          checked={isChecked}\r\n          onChange={handleCaseChoose}\r\n        />\r\n        <div className={cl('title')}>{name}</div>\r\n        <div className={cl('description')}>{title}</div>\r\n      </label>\r\n    </li>\r\n  );\r\n}\r\n\r\nCaseLabel.propTypes = {\r\n  caseItem: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    title: PropTypes.string,\r\n    name: PropTypes.string,\r\n  }),\r\n  isChecked: PropTypes.bool,\r\n  onChoose: PropTypes.func.isRequired,\r\n};\r\n\r\nCaseLabel.defaultProps = {\r\n  caseItem: {\r\n    title: '',\r\n    description: '',\r\n  },\r\n  isChecked: false,\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    graph: state.graph,\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onChoose: (currentCase) => dispatch(setCase(currentCase)),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CaseLabel);\r\n\r\n","import { SET_GRAPH, RESET_GRAPH, SET_CASE } from './actionTypes';\r\n\r\nexport function setGraph(graph, enteredLine, isWronglyParsed) {\r\n  return {\r\n    type: SET_GRAPH,\r\n    payload: { graph, enteredLine, isWronglyParsed }\r\n  }\r\n}\r\n\r\nexport function resetGraph() {\r\n  return {\r\n    type: RESET_GRAPH,\r\n  }\r\n}\r\n\r\nexport function setCase(currentCase) {\r\n  return {\r\n    type: SET_CASE,\r\n    payload: { currentCase }\r\n  }\r\n}","export const SET_GRAPH = 'SET_GRAPH';\r\nexport const RESET_GRAPH = 'RESET_GRAPH';\r\n\r\nexport const SET_CASE = 'SET_CASE';","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { RoutesList, Workspace } from '..';\r\n\r\nfunction Content({ graph }) {\r\n  const atLeastOneEdge = graph.edges.length > 0;\r\n  return (\r\n    <div className=\"content\">\r\n      <RoutesList />\r\n      {atLeastOneEdge > 0 && <Workspace />}\r\n    </div>\r\n  );\r\n}\r\n\r\nContent.propTypes = {\r\n  graph: PropTypes.shape({\r\n    edges: PropTypes.arrayOf(PropTypes.any).isRequired,\r\n    vertexes: PropTypes.arrayOf(PropTypes.any).isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    graph: state.graph,\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Content);","import React from 'react';\r\n\r\nimport './Footer.css';\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div className=\"footer\">\r\n      <h1 className=\"footer__title\">Viktor Lebedko</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { block } from 'bem-cn';\r\n\r\nimport './Form.css';\r\n\r\nconst f = block('form');\r\n\r\nfunction Form({ description, caseAB, caseForm, placeholder, onEnter }) {\r\n  const [value, setValue] = useState('');\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (value) {\r\n      onEnter(value);\r\n      setValue('');\r\n    }\r\n  }\r\n\r\n  const handleChange = (event) => {\r\n    let curValue = event.target.value.toUpperCase();\r\n    if (caseForm) {\r\n      curValue = curValue.replace(/[^A-Za-z]/ig, '');\r\n    } else {\r\n      curValue = curValue.replace(/[^A-Za-z0-9,]/ig, '');\r\n    }\r\n    setValue(curValue);\r\n  }\r\n    return (\r\n    <div>\r\n      <h4 className={`text-with-indent ${f('description')}`}>{description}</h4>\r\n      <form\r\n        className={f()}\r\n        onSubmit={handleSubmit}\r\n      >\r\n        <input\r\n          className={f('input')}\r\n          type=\"text\"\r\n          maxLength={caseAB ? 2 : undefined}\r\n          placeholder={`Type it here, ${placeholder}`}\r\n          value={value}\r\n          onChange={handleChange}\r\n        />\r\n        <button\r\n          className={f('button')}\r\n          type=\"submit\"\r\n        >\r\n          ENTER\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nForm.propTypes = {\r\n  onEnter: PropTypes.func.isRequired,\r\n  description: PropTypes.string.isRequired,\r\n  caseForm: PropTypes.bool,\r\n  caseAB: PropTypes.bool,\r\n  placeholder: PropTypes.string,\r\n};\r\n\r\nForm.defaultProps = {\r\n  caseForm: false,\r\n  caseAB: false,\r\n  placeholder: '',\r\n};\r\n\r\nexport default Form;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { block } from 'bem-cn';\r\n\r\nimport './Form.css';\r\n\r\nconst f = block('form');\r\n\r\nfunction FormWithStops({ description, onEnter, placeholder }) {\r\n  const [route, setRoute] = useState('');\r\n  const [stops, setStops] = useState('');\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (route && stops) {\r\n      onEnter(route, stops);\r\n      setRoute('');\r\n      setStops('');\r\n    }\r\n  }\r\n\r\n  const handleChange = (event) => {\r\n    let curRoute = event.target.value.toUpperCase();\r\n    curRoute = curRoute.replace(/[^A-Za-z]/ig, '');\r\n    setRoute(curRoute)\r\n  }\r\n\r\n  const handleStopsChange = (event) => {\r\n    let curStops = event.target.value;\r\n    curStops = curStops.replace(/[^0-9]/ig, '');\r\n    setStops(curStops);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h4 className={`text-with-indent ${f('description')}`}>{description}</h4>\r\n      <form className={f()} onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          size=\"3\"\r\n          placeholder=\"stops\"\r\n          value={stops}\r\n          onChange={handleStopsChange}\r\n        />\r\n        <input\r\n          className={f('input', 'case2')}\r\n          type=\"text\"\r\n          maxLength={2}\r\n          placeholder={`Type route here, ${placeholder}`}\r\n          value={route}\r\n          onChange={handleChange}\r\n        />\r\n        <button className={f('button')} type=\"submit\">ENTER</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nFormWithStops.propTypes = {\r\n  onEnter: PropTypes.func.isRequired,\r\n  description: PropTypes.string.isRequired,\r\n  placeholder: PropTypes.string,\r\n};\r\n\r\nFormWithStops.defaultProps = {\r\n  placeholder: '',\r\n};\r\n\r\nexport default FormWithStops;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { block } from 'bem-cn';\r\n\r\nimport { Stats } from '..';\r\n\r\nimport Pdf from './task.pdf'\r\n\r\nimport './Header.css';\r\n\r\nconst b = block('header');\r\n\r\nfunction Header({ title }) {\r\n  return (\r\n    <div className={b()}>\r\n      <Stats />\r\n      <h1 className={b('title')}>{title}</h1>\r\n      <div className={b('button-container')}>\r\n        <button\r\n          className={b('button')}\r\n          onClick={() => {}}\r\n          type=\"button\"\r\n        >\r\n          What is this service for?\r\n        </button>\r\n      </div>\r\n      <iframe src={Pdf} title=\"_blank\" width=\"100%\" height=\"500px\"></iframe>\r\n    </div>\r\n  );\r\n}\r\n\r\nHeader.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Header;\r\n","import React, { useRef } from 'react';\r\nimport lottie from 'lottie-web';\r\nimport { block } from 'bem-cn';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport trainAnimation from './train-animation.json';\r\n\r\nimport './Loader.css';\r\n\r\nconst l = block('loader');\r\n\r\nfunction Loader({ isLoading }) {\r\n  const element = useRef(null);\r\n\r\n  const mountAnimation = () => {\r\n    if (element && element.current) {\r\n      lottie.loadAnimation({\r\n        container: element.current,\r\n        renderer: 'svg',\r\n        loop: true,\r\n        autoplay: true,\r\n        animationData: trainAnimation,\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <CSSTransition \r\n      in={isLoading}\r\n      timeout={200}\r\n      classNames={l()}\r\n      onEnter={mountAnimation}\r\n      unmountOnExit\r\n    >\r\n      <div className={l('backdrop')}>\r\n        <div className={l('animation')} ref={element}></div>\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n}\r\n\r\nLoader.propTypes = {\r\n  isLoading: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default Loader;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { block } from 'bem-cn';\r\n\r\nimport './Route.css';\r\n\r\nconst r = block('route');\r\n\r\nfunction Route({ start, end, cost }) {\r\n  return (\r\n    <li className={r()}>\r\n      <div className={r('start')}>{start}</div>\r\n      <div className={r('end')}>{end}</div>\r\n      <div>{cost}</div>\r\n    </li>\r\n  );\r\n}\r\n\r\nRoute.propTypes = {\r\n  start: PropTypes.string.isRequired,\r\n  end: PropTypes.string.isRequired,\r\n  cost: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Route;\r\n","class Edge {\r\n  constructor(id, start = ' ', end = ' ', weight = ' ') {\r\n    this.id = id;\r\n    this.start = start.replace(/[^A-Z]/, '*');\r\n    this.end = end.replace(/[^A-Z]/, '*');\r\n    this.weight = weight.match(/^\\d+$/) ? parseInt(weight, 10) : '*';\r\n  }\r\n}\r\n\r\nexport default Edge;\r\n","import Edge from '../models/Edge';\r\n\r\nconst parser = (data) => {\r\n  let id = 0;\r\n  const result = data.split(',')\r\n    .map(route => new Edge(id += 1, route[0], route[1], route.substring(2)));\r\n  return result;\r\n};\r\n\r\nexport default parser;\r\n","import find from 'lodash/find';\r\nimport pull from 'lodash/pull';\r\nimport min from 'lodash/min';\r\n\r\nclass Graph {\r\n  constructor(edges) {\r\n    this.edges = edges;\r\n    this.vertexes = [];\r\n\r\n    edges.forEach((edge) => {\r\n      if (this.vertexes.indexOf(edge.start) === -1) this.vertexes.push(edge.start);\r\n      if (this.vertexes.indexOf(edge.end) === -1) this.vertexes.push(edge.end);\r\n    });\r\n  }\r\n\r\n  dijkstra(fromPoint, toPoint) {\r\n    const distances = {};\r\n    const previous = {};\r\n    let discussingVertexes = [];\r\n    discussingVertexes = this.vertexes.map((vertex) => {\r\n      distances[vertex] = Infinity;\r\n      previous[vertex] = null;\r\n      return vertex;\r\n    });\r\n    distances[fromPoint] = 0;\r\n    while (discussingVertexes.length > 0) {\r\n      let currentMinValue = Infinity;\r\n      let currentVertex = null;\r\n      for (let i = 0; i < discussingVertexes.length; i += 1) {\r\n        if (distances[discussingVertexes[i]] < currentMinValue) {\r\n          currentVertex = discussingVertexes[i];\r\n          currentMinValue = distances[currentVertex];\r\n        }\r\n      }\r\n      if (currentVertex === toPoint) {\r\n        break;\r\n      }\r\n      pull(discussingVertexes, currentVertex);\r\n      this.edges.filter(edge => edge.start === currentVertex).forEach((edge) => {\r\n        const alternativeDistance = distances[currentVertex] + edge.weight;\r\n        if (alternativeDistance < distances[edge.end]) {\r\n          distances[edge.end] = alternativeDistance;\r\n          previous[edge.end] = currentVertex;\r\n        }\r\n      });\r\n    }\r\n    return distances[toPoint];\r\n  }\r\n\r\n  findBestPath(route) {\r\n    const start = route.charAt(0);\r\n    const end = route.charAt(1);\r\n    if (this.vertexes.indexOf(start) === -1 || this.vertexes.indexOf(end) === -1) {\r\n      return `${route}: NO SUCH ROUTE`;\r\n    }\r\n    const routesWithSuitableStart = this.edges.filter(edge => edge.start === start);\r\n    const pricesOfSuitableStarts = routesWithSuitableStart\r\n      .map(edge => edge.weight + this.dijkstra(edge.end, end));\r\n    const bestPath = min(pricesOfSuitableStarts);\r\n    return bestPath ? `The cost of cheapest delivery on the route ${route} is ${bestPath}` : `${route}: NO SUCH ROUTE`;\r\n  }\r\n\r\n\r\n  countPathWeight(path) {\r\n    const stopsArray = path.split('');\r\n    let weight = 0;\r\n    for (let i = 0; i < stopsArray.length - 1; i += 1) {\r\n      const pointA = stopsArray[i];\r\n      const pointB = stopsArray[i + 1];\r\n      const suitableZone = find(this.edges, edge => edge.start === pointA && edge.end === pointB);\r\n      if (suitableZone) {\r\n        weight += suitableZone.weight;\r\n      } else {\r\n        weight = -1;\r\n        break;\r\n      }\r\n    }\r\n    return (weight === -1) ? `${path}: NO SUCH ROUTE` : `The cost of route ${path} is ${weight}`;\r\n  }\r\n\r\n\r\n  countTrips(passedWay, currentPoint, finishPoint, ceiling) {\r\n    if (currentPoint === finishPoint && passedWay.length <= ceiling && passedWay.length !== 0) {\r\n      return 1;\r\n    } if (passedWay.length > ceiling) {\r\n      return 0;\r\n    }\r\n    const passedWayWithCurrentPoint = [...passedWay, currentPoint];\r\n    return this.edges\r\n      .filter(edge => edge.start === currentPoint)\r\n      .reduce(\r\n        (sum, edge) => sum + this.countTrips(passedWayWithCurrentPoint, edge.end, finishPoint, ceiling),\r\n        0,\r\n      );\r\n  }\r\n\r\n  countTripsWithLessThanNStops(route, maxStops) {\r\n    const start = route.charAt(0);\r\n    const end = route.charAt(1);\r\n    if (this.vertexes.indexOf(start) === -1 || this.vertexes.indexOf(end) === -1) {\r\n      return `${route}: NO SUCH ROUTE`;\r\n    }\r\n    return `The number of possible delivery of route ${route} with a maximum\r\n        of ${maxStops} stops is ${this.countTrips([], start, end, maxStops)}`;\r\n  }\r\n}\r\n\r\nexport default Graph;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { block } from 'bem-cn';\r\n\r\nimport { Route, Form} from '..';\r\n\r\nimport { resetGraph, setGraph } from '../../redux/actions/actions';\r\nimport parser from '../../helpers/parser';\r\nimport Graph from '../../models/Graph';\r\n\r\nimport './RoutesList.css'\r\n\r\nconst wp = block('warning-panel');\r\nconst rl = block('routes-list');\r\n\r\nfunction RoutesList({ enteredLine, graph: { edges }, isWronglyParsed, onSubmit, onReset }) {\r\n  const atLeastOneEdge = edges.length > 0;\r\n\r\n  const onEnter = (value) => {\r\n    const nodes = parser(value);\r\n    const correctParsedNodes = nodes.filter((node) => node.start !== '*' && node.end !== '*' && node.weight !== '*');\r\n    const isWronglyParsed = !(nodes.length === correctParsedNodes.length);\r\n    const graph = new Graph(correctParsedNodes);\r\n    onSubmit(graph, value, isWronglyParsed);\r\n  };\r\n\r\n  return (\r\n    <div className={rl()}>\r\n      <Form\r\n        onEnter={onEnter}\r\n        description=\"Enter all available routes(comma-separated, e.g. 'AB1,BF4,FE7')\"\r\n        placeholder=\"e.g. 'AB1,BF4,FE7'\"\r\n      />\r\n      {isWronglyParsed && (\r\n        <div className={wp()}>\r\n          <div className={wp('header')}>\r\n            Some entered routes were parsed not correct. Please, check correctness of your input.\r\n          </div>\r\n          {atLeastOneEdge && (\r\n            <div className={wp('advice')}>\r\n              Successfully processed routes are available for further work. Have a good Journey!\r\n            </div>\r\n          )}\r\n          <div className={wp('line')}>\r\n            {enteredLine}\r\n          </div>\r\n        </div>\r\n      )}\r\n      {atLeastOneEdge && (\r\n        <div>\r\n          <div className={rl('show-part')}>\r\n            <div className={rl('title-line')}>\r\n              <div className={rl('title')}>\r\n                Available Routes List\r\n              </div>\r\n              <button\r\n                className={rl('button')}\r\n                onClick={onReset}\r\n                type=\"button\"\r\n              >\r\n                Reset Routes List\r\n              </button>\r\n            </div>\r\n            <ul className={rl('container')}>\r\n              {\r\n                edges.map((edge) => (\r\n                  <Route\r\n                    key={edge.id}\r\n                    id={edge.id}\r\n                    start={edge.start}\r\n                    end={edge.end}\r\n                    cost={edge.weight}\r\n                  />\r\n                ))\r\n              }\r\n            </ul>\r\n\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nRoutesList.propTypes = {\r\n  graph: PropTypes.shape({\r\n    edges: PropTypes.arrayOf(PropTypes.any),\r\n    vertexes: PropTypes.arrayOf(PropTypes.any),\r\n  }),\r\n  isWronglyParsed: PropTypes.bool.isRequired,\r\n  onSubmit: PropTypes.func.isRequired,\r\n  onReset: PropTypes.func.isRequired,\r\n  enteredLine: PropTypes.string,\r\n};\r\n\r\nRoutesList.defaultProps = {\r\n  graph: {\r\n    edges: [],\r\n    vertexes: [],\r\n  },\r\n  enteredLine: '',\r\n  isWronglyParsed: false,\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    graph: state.graph,\r\n    enteredLine: state.userInput.enteredLine,\r\n    isWronglyParsed: state.userInput.isWronglyParsed\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onReset: () => dispatch(resetGraph()),\r\n    onSubmit: (graph, enteredLine, isWronglyParsed) => dispatch(setGraph(graph, enteredLine, isWronglyParsed)),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RoutesList);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { block } from 'bem-cn';\r\n\r\nimport './Stats.css'\r\n\r\nconst s = block('stats');\r\n\r\nfunction Stats({ graph: { edges, vertexes } }) {\r\n  const routes = edges.length;\r\n  const cities = vertexes.length;\r\n  return (\r\n    <div className={s()}>\r\n      <div className={s('row')}>\r\n        <div className={s('name')}>ROUTES AVAILABLE:</div>\r\n        <div className={s('value')}>{routes}</div>\r\n      </div>\r\n      <div className={s('row')}>\r\n        <div className={s('name')}>CITIES COVERED:</div>\r\n        <div className={s('value')}>{cities}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nStats.propTypes = {\r\n  graph: PropTypes.shape({\r\n    edges: PropTypes.arrayOf(PropTypes.any),\r\n    vertexes: PropTypes.arrayOf(PropTypes.any),\r\n  }),\r\n};\r\n\r\nStats.defaultProps = {\r\n  graph: {\r\n    edges: [],\r\n    vertexes: [],\r\n  },\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    graph: state.graph\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Stats);\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { block } from 'bem-cn';\r\n\r\nimport { Form } from '../..';\r\n\r\nconst r = block('result');\r\n\r\nfunction CaseOne({ graph, caseInfo }) {\r\n  const [calculatingRoute, setCalculatingRoute] = useState('');\r\n\r\n  const handleEnter = (route) => {\r\n    setCalculatingRoute(route.toUpperCase());\r\n  }\r\n\r\n  const calculateCost = (route) => {\r\n    return graph.countPathWeight(route);\r\n  }\r\n\r\n  const handleReset = () => {\r\n    setCalculatingRoute('');\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2 className=\"text-with-indent\">CaseOne. The delivery cost of route.</h2>\r\n      <Form\r\n        caseForm\r\n        onEnter={handleEnter}\r\n        description={caseInfo.description}\r\n        placeholder={caseInfo.placeholder}\r\n      />\r\n      <div>\r\n        {calculatingRoute && (\r\n          <div className={r()}>\r\n            <div className={r('text')}>{calculateCost(calculatingRoute)}</div>\r\n            <button\r\n              className={r('reset-button')}\r\n              onClick={handleReset}\r\n              type=\"button\"\r\n            >\r\n              RESET THE LAST COUNTED ROUTE\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nCaseOne.propTypes = {\r\n  graph: PropTypes.shape({\r\n    edges: PropTypes.arrayOf(PropTypes.any).isRequired,\r\n    vertexes: PropTypes.arrayOf(PropTypes.any).isRequired,\r\n    countPathWeight: PropTypes.func,\r\n  }).isRequired,\r\n  caseInfo: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    description: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default CaseOne;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { block } from 'bem-cn';\r\n\r\nimport { FormWithStops } from '../..';\r\n\r\nconst r = block('result');\r\n\r\nfunction CaseTwo({ graph, caseInfo }) {\r\n  const [calculatingRoute, setCalculatingRoute] = useState('');\r\n  const [calculatingStops, setCalculatingStops] = useState('');\r\n\r\n  const handleEnter = (route, stops) => {\r\n    setCalculatingRoute(route.toUpperCase());\r\n    setCalculatingStops(stops);\r\n  }\r\n\r\n  const calculateDeliveryAmount = (route, stops) => {\r\n    return graph.countTripsWithLessThanNStops(route, Number(stops));\r\n  }\r\n\r\n  const handleReset = () => {\r\n    setCalculatingRoute('');\r\n    setCalculatingStops('');\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2 className=\"text-with-indent\">CaseTwo. The number of possible delivery route that can be construct by the given conditions.</h2>\r\n      <FormWithStops\r\n        onEnter={handleEnter}\r\n        description={caseInfo.description}\r\n        placeholder={caseInfo.placeholder}\r\n      />\r\n      <div>\r\n        {calculatingRoute && calculatingStops && (\r\n          <div className={r()}>\r\n            <div className={r('text')}>\r\n              {calculateDeliveryAmount(calculatingRoute, calculatingStops)}\r\n            </div>\r\n            <button\r\n              className={r('reset-button')}\r\n              onClick={handleReset}\r\n              type=\"button\"\r\n            >\r\n              RESET THE LAST COUNTED ROUTE AND STOPS AMOUNT\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nCaseTwo.propTypes = {\r\n  graph: PropTypes.shape({\r\n    edges: PropTypes.arrayOf(PropTypes.any).isRequired,\r\n    vertexes: PropTypes.arrayOf(PropTypes.any).isRequired,\r\n    countTripsWithLessThanNStops: PropTypes.func,\r\n  }).isRequired,\r\n  caseInfo: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    description: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default CaseTwo;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { block } from 'bem-cn';\r\n\r\nimport { Form } from '../..';\r\n\r\nconst r = block('result');\r\n\r\nfunction CaseThree({ graph, caseInfo }) {\r\n  const [calculatingRoute, setCalculatingRoute] = useState('');\r\n\r\n  const handleEnter = (route) => {\r\n    setCalculatingRoute(route.toUpperCase());\r\n  }\r\n\r\n  const calculateCheapestCost = (route) => {\r\n    return graph.findBestPath(route);\r\n  }\r\n\r\n  const handleReset = () => {\r\n    setCalculatingRoute('');\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2 className=\"text-with-indent\">CaseThree. The cheapest delivery route between two towns.</h2>\r\n      <Form\r\n        caseForm\r\n        caseAB\r\n        onEnter={handleEnter}\r\n        description={caseInfo.description}\r\n        placeholder={caseInfo.placeholder}\r\n      />\r\n      <div>\r\n        {calculatingRoute && (\r\n          <div className={r()}>\r\n            <div className={r('text')}>{calculateCheapestCost(calculatingRoute)}</div>\r\n            <button\r\n              className={r('reset-button')}\r\n              onClick={handleReset}\r\n              type=\"button\"\r\n            >\r\n              RESET THE LAST COUNTED ROUTE\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nCaseThree.propTypes = {\r\n  graph: PropTypes.shape({\r\n    edges: PropTypes.arrayOf(PropTypes.any).isRequired,\r\n    vertexes: PropTypes.arrayOf(PropTypes.any).isRequired,\r\n    findBestPath: PropTypes.func,\r\n  }).isRequired,\r\n  caseInfo: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    description: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default CaseThree;\r\n","const caseData = [\r\n  {\r\n    id: 'case1',\r\n    name: 'CaseOne',\r\n    title: 'The delivery cost of route.',\r\n    description: 'Enter the route to calcualte the cost of delivery. Only latin letters allowed (e.g. \"ABC\", \"ADEF\")',\r\n    placeholder: 'e.g. \"ABC\", \"ADEF\"',\r\n  },\r\n  {\r\n    id: 'case2',\r\n    name: 'CaseTwo',\r\n    title: 'The number of possible delivery route.',\r\n    description: 'Enter the first, the end points of route(only latin letters allowed, e.g. \"AB\", \"EF\") and maximum amount of stops(only numbers allowed, e.g. \"5\", \"17\").',\r\n    placeholder: 'e.g. \"AB\", \"EF\"',\r\n  },\r\n  {\r\n    id: 'case3',\r\n    name: 'CaseThree',\r\n    title: 'The cheapest delivery route between two towns.',\r\n    description: 'Enter the first and the end points of route. Only latin letters allowed (e.g. \"AB\", \"EF\")',\r\n    placeholder: 'e.g. \"AB\", \"EF\"',\r\n  },\r\n];\r\n\r\nexport default caseData;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { CaseOne, CaseTwo, CaseThree } from './Cases';\r\nimport { CaseLabel } from '..';\r\n\r\nimport './Workspace.css';\r\nimport './Cases.css';\r\n\r\nimport caseData from './case-data';\r\n\r\nfunction Workspace({ currentCase, graph }) {\r\n  const renderCurrentCase = (curCase) => {\r\n    switch (curCase) {\r\n      case 'case1': return <CaseOne graph={graph} caseInfo={caseData[0]} />;\r\n      case 'case2': return <CaseTwo graph={graph} caseInfo={caseData[1]} />;\r\n      case 'case3': return <CaseThree graph={graph} caseInfo={caseData[2]} />;\r\n      default: return <div />;\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"workspace\">\r\n      <ul className=\"case-label-container\">\r\n        {\r\n          caseData.map((caseItem) => (\r\n            <CaseLabel\r\n              key={caseItem.id}\r\n              caseItem={caseItem}\r\n              isChecked={currentCase === caseItem.id}\r\n            />\r\n          ))\r\n        }\r\n      </ul>\r\n      {renderCurrentCase(currentCase)}\r\n    </div>\r\n  );\r\n}\r\n\r\nWorkspace.propTypes = {\r\n  currentCase: PropTypes.string.isRequired,\r\n  graph: PropTypes.shape({\r\n    edges: PropTypes.arrayOf(PropTypes.any).isRequired,\r\n    vertexes: PropTypes.arrayOf(PropTypes.any).isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    graph: state.graph,\r\n    currentCase: state.currentCase\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Workspace);\r\n","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Header, Content, Footer, Loader } from './components';\r\n\r\nimport './index.css'\r\n\r\nfunction App({ title }) {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const loadInitialData = () => {\r\n    setIsLoading(true);\r\n    setTimeout(() => setIsLoading(false), 1000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadInitialData();\r\n  }, []);\r\n  return (\r\n    <div className=\"main\">\r\n      <Loader isLoading={isLoading} />\r\n      <Header title={title} />\r\n      <Content />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nApp.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default App;\r\n","import Graph from '../../models/Graph';\r\n\r\nconst initialState = new Graph([]);\r\n\r\nexport default function graph(state = initialState, action) {\r\n  switch (action.type) {\r\n    case 'SET_GRAPH': {\r\n      const { graph } = action.payload;\r\n      return graph;\r\n    }\r\n    case 'RESET_GRAPH': {\r\n      // const { graph } = action.payload;\r\n      return new Graph([]);\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}","const initialState = { enteredLine: '', isWronglyParsed: false };\r\n\r\nexport default function userInput(state = initialState, action) {\r\n  switch (action.type) {\r\n    case 'SET_GRAPH': {\r\n      const { enteredLine, isWronglyParsed } = action.payload;\r\n      return { enteredLine, isWronglyParsed };\r\n    }\r\n    case 'RESET_GRAPH': {\r\n      return { enteredLine: '', isWronglyParsed: false };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}","import {combineReducers} from 'redux';\r\nimport graph from './reducers/graph';\r\nimport userInput from './reducers/userInput';\r\nimport currentCase from './reducers/currentCase';\r\n\r\nexport default combineReducers({ graph, userInput, currentCase });","const initialState = '';\r\n\r\nexport default function currentCase(state = initialState, action) {\r\n  switch (action.type) {\r\n    case 'SET_GRAPH': {\r\n      return '';\r\n    }\r\n    case 'RESET_GRAPH': {\r\n      return '';\r\n    }\r\n    case 'SET_CASE': {\r\n      const { currentCase } = action.payload;\r\n      return currentCase;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport App from './App';\r\n\r\nimport rootReducer from './redux/rootReducer';\r\n\r\nimport './index.css';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App title=\"Eko​ ​Delivery​ ​Service\" />\r\n  </Provider>, \r\n  document.getElementById('root')\r\n);\r\n","module.exports = __webpack_public_path__ + \"static/media/task.0b33b592.pdf\";"],"sourceRoot":""}