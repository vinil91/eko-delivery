{"version":3,"sources":["redux/actions/actions.js","redux/actions/actionTypes.js","components/CaseLabel/CaseLabel.jsx","components/Content/Content.jsx","components/Footer/Footer.jsx","components/Form/Form.jsx","components/Form/FormWithStops.jsx","components/Header/Header.jsx","components/Loader/Loader.jsx","components/Route/Route.jsx","models/Edge.js","models/Graph.js","helpers/parser.js","components/RoutesList/RoutesList.jsx","components/Stats/Stats.jsx","components/TaskDescription/TaskDescription.jsx","components/Workspace/Cases/CaseOne.jsx","components/Workspace/Cases/CaseTwo.jsx","components/Workspace/Cases/CaseThree.jsx","components/Workspace/case-data.js","components/Workspace/Workspace.jsx","App.jsx","redux/reducers/graph.js","redux/reducers/userInput.js","redux/reducers/info.js","redux/rootReducer.js","redux/reducers/currentCase.js","index.js","components/TaskDescription/task.pdf"],"names":["setTemperature","city","temperature","type","payload","setRate","rate","setInfoLoading","isInfoLoading","cl","block","CaseLabel","isChecked","onChoose","caseItem","id","name","title","className","key","checked","htmlFor","value","onChange","event","currentCase","target","defaultProps","description","connect","state","graph","dispatch","setCase","atLeastOneEdge","edges","length","Footer","f","Form","caseAB","caseForm","placeholder","onEnter","useState","setValue","onSubmit","preventDefault","maxLength","undefined","curValue","toUpperCase","replace","FormWithStops","route","setRoute","stops","setStops","size","curStops","curRoute","b","info","setInfo","sleep","ms","Promise","resolve","setTimeout","a","weatherUrl","currencyUrl","fetch","response","json","Math","floor","rates","RUB","console","error","main","temp","asyncSetInfo","isShowingPdf","setShowingPdf","useEffect","onClick","onClose","l","element","useRef","isAppLoading","CSSTransition","in","timeout","classNames","current","lottie","loadAnimation","container","renderer","loop","autoplay","animationData","trainAnimation","unmountOnExit","ref","r","Route","start","end","cost","Edge","weight","this","match","parseInt","Graph","vertexes","result","forEach","edge","indexOf","push","initialVertexes","fromPoint","toPoint","discussingVertexes","distances","previous","map","vertex","Infinity","currentMinValue","currentVertex","i","pull","filter","alternativeDistance","charAt","pricesOfSuitableStarts","dijkstra","bestPath","min","path","stopsArray","split","pointA","pointB","suitableZone","find","passedWay","currentPoint","finishPoint","ceiling","passedWayWithCurrentPoint","reduce","sum","countTrips","maxStops","parser","data","substring","correctParsedEdges","node","isValueWronglyParsed","nodes","normalizeNodesIds","wp","rl","RoutesList","enteredLine","isWronglyParsed","onReset","userInput","setGraph","s","Stats","routes","cities","TaskDescription","src","taskPdf","width","height","CaseOne","caseInfo","calculatingRoute","setCalculatingRoute","countPathWeight","CaseTwo","calculatingStops","setCalculatingStops","countTripsWithLessThanNStops","Number","CaseThree","findBestPath","caseData","curCase","renderCurrentCase","App","initialState","combineReducers","action","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.07f0d8ae.chunk.js","sourcesContent":["import { SET_GRAPH, RESET_GRAPH, SET_CASE, SET_TEMPERATURE, SET_RATE, SET_INFO_LOADING } from './actionTypes';\r\n\r\nexport function setGraph(graph, enteredLine, isWronglyParsed) {\r\n  return {\r\n    type: SET_GRAPH,\r\n    payload: { graph, enteredLine, isWronglyParsed }\r\n  }\r\n}\r\n\r\nexport function resetGraph() {\r\n  return {\r\n    type: RESET_GRAPH,\r\n  }\r\n}\r\n\r\nexport function setCase(currentCase) {\r\n  return {\r\n    type: SET_CASE,\r\n    payload: { currentCase }\r\n  }\r\n}\r\n\r\nexport function setTemperature(city, temperature) {\r\n  return {\r\n    type: SET_TEMPERATURE,\r\n    payload: { city, temperature }\r\n  }\r\n}\r\n\r\nexport function setRate(rate) {\r\n  return {\r\n    type: SET_RATE,\r\n    payload: { rate }\r\n  }\r\n}\r\n\r\nexport function setInfoLoading(isInfoLoading) {\r\n  return {\r\n    type: SET_INFO_LOADING,\r\n    payload: { isInfoLoading }\r\n  }\r\n}\r\n\r\nexport function asyncSetInfo() {\r\n  function sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n  return async (dispatch) => {\r\n    const spbId = '498817';\r\n    const userApiKey = 'cff9c1c23d29919e22bdde648539d450'\r\n    const weatherUrl = `https://api.openweathermap.org/data/2.5/weather?id=${spbId}&appid=${userApiKey}&units=metric`;\r\n    const currencyUrl = 'https://api.exchangeratesapi.io/latest?base=USD';\r\n    dispatch(setInfoLoading(true));\r\n    await sleep(1000)\r\n    try {\r\n      const response = await fetch(currencyUrl);\r\n      let json = await response.json();\r\n      dispatch(setRate(Math.floor(json.rates.RUB*100)/100));\r\n    } catch(e) {\r\n      console.error(\"Ошибка Загрузки Курса Валют\");\r\n      dispatch(setRate(0));\r\n    }\r\n    try {\r\n      const response = await fetch(weatherUrl);\r\n      let json = await response.json();\r\n      dispatch(setTemperature(json.name, json.main.temp));\r\n    } catch(e) {\r\n      console.error(\"Ошибка Загрузки Температуры\");\r\n      dispatch(setTemperature('', ''));\r\n    }\r\n    dispatch(setInfoLoading(false));\r\n  }\r\n}","export const SET_GRAPH = 'SET_GRAPH';\r\nexport const RESET_GRAPH = 'RESET_GRAPH';\r\n\r\nexport const SET_CASE = 'SET_CASE';\r\n\r\nexport const SET_RATE = 'SET_RATE';\r\nexport const SET_TEMPERATURE = 'SET_TEMPERATURE';\r\nexport const SET_INFO_LOADING = 'SET_INFO_LOADING';","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { block } from 'bem-cn';\r\n\r\nimport { setCase } from '../../redux/actions/actions';\r\n\r\nimport './CaseLabel.css';\r\n\r\nconst cl = block('case-label');\r\n\r\nfunction CaseLabel({ isChecked, onChoose, caseItem: { id, name, title } }) {\r\n  const handleCaseChoose = (event) => {\r\n    const currentCase = event.target.value;\r\n    onChoose(currentCase);\r\n  };\r\n\r\n  return (\r\n    <li className={cl()} key={id}>\r\n      <label className={cl('info-container', { checked: isChecked })} htmlFor={id}>\r\n        <input\r\n          className={cl('input')}\r\n          type=\"radio\"\r\n          name=\"currentCase\"\r\n          id={id}\r\n          value={id}\r\n          checked={isChecked}\r\n          onChange={handleCaseChoose}\r\n        />\r\n        <div className={cl('title')}>{name}</div>\r\n        <div className={cl('description')}>{title}</div>\r\n      </label>\r\n    </li>\r\n  );\r\n}\r\n\r\nCaseLabel.propTypes = {\r\n  caseItem: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    title: PropTypes.string,\r\n    name: PropTypes.string,\r\n  }),\r\n  isChecked: PropTypes.bool,\r\n  onChoose: PropTypes.func.isRequired,\r\n};\r\n\r\nCaseLabel.defaultProps = {\r\n  caseItem: {\r\n    title: '',\r\n    description: '',\r\n  },\r\n  isChecked: false,\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    graph: state.graph,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onChoose: (currentCase) => dispatch(setCase(currentCase)),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CaseLabel);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { RoutesList, Workspace } from '..';\r\n\r\nfunction Content({ graph }) {\r\n  const atLeastOneEdge = graph.edges.length > 0;\r\n  return (\r\n    <div className=\"content\">\r\n      <RoutesList />\r\n      {atLeastOneEdge > 0 && <Workspace />}\r\n    </div>\r\n  );\r\n}\r\n\r\nContent.propTypes = {\r\n  graph: PropTypes.shape({\r\n    edges: PropTypes.arrayOf(PropTypes.any).isRequired,\r\n    vertexes: PropTypes.arrayOf(PropTypes.any).isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    graph: state.graph,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Content);\r\n","import React from 'react';\r\n\r\nimport './Footer.css';\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div className=\"footer\">\r\n      <h1 className=\"footer__title\">Viktor Lebedko</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { block } from 'bem-cn';\r\n\r\nimport './Form.css';\r\n\r\nconst f = block('form');\r\n\r\nfunction Form({\r\n  description, caseAB, caseForm, placeholder, onEnter,\r\n}) {\r\n  const [value, setValue] = useState('');\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (value) {\r\n      onEnter(value);\r\n      setValue('');\r\n    }\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    let curValue = event.target.value.toUpperCase();\r\n    if (caseForm) {\r\n      curValue = curValue.replace(/[^A-Za-z]/ig, '');\r\n    } else {\r\n      curValue = curValue.replace(/[^A-Za-z0-9,]/ig, '');\r\n    }\r\n    setValue(curValue);\r\n  };\r\n  return (\r\n    <div>\r\n      <h4 className={`text-with-indent ${f('description')}`}>{description}</h4>\r\n      <form\r\n        className={f()}\r\n        onSubmit={handleSubmit}\r\n      >\r\n        <input\r\n          className={f('input')}\r\n          type=\"text\"\r\n          maxLength={caseAB ? 2 : undefined}\r\n          placeholder={`Type it here, ${placeholder}`}\r\n          value={value}\r\n          onChange={handleChange}\r\n        />\r\n        <button\r\n          className={f('button')}\r\n          type=\"submit\"\r\n        >\r\n          ENTER\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nForm.propTypes = {\r\n  onEnter: PropTypes.func.isRequired,\r\n  description: PropTypes.string.isRequired,\r\n  caseForm: PropTypes.bool,\r\n  caseAB: PropTypes.bool,\r\n  placeholder: PropTypes.string,\r\n};\r\n\r\nForm.defaultProps = {\r\n  caseForm: false,\r\n  caseAB: false,\r\n  placeholder: '',\r\n};\r\n\r\nexport default Form;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { block } from 'bem-cn';\r\n\r\nimport './Form.css';\r\n\r\nconst f = block('form');\r\n\r\nfunction FormWithStops({ description, onEnter, placeholder }) {\r\n  const [route, setRoute] = useState('');\r\n  const [stops, setStops] = useState('');\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (route && stops) {\r\n      onEnter(route, stops);\r\n      setRoute('');\r\n      setStops('');\r\n    }\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    let curRoute = event.target.value.toUpperCase();\r\n    curRoute = curRoute.replace(/[^A-Za-z]/ig, '');\r\n    setRoute(curRoute);\r\n  };\r\n\r\n  const handleStopsChange = (event) => {\r\n    let curStops = event.target.value;\r\n    curStops = curStops.replace(/[^0-9]/ig, '');\r\n    setStops(curStops);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h4 className={`text-with-indent ${f('description')}`}>{description}</h4>\r\n      <form className={f()} onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          size=\"3\"\r\n          placeholder=\"stops\"\r\n          value={stops}\r\n          onChange={handleStopsChange}\r\n        />\r\n        <input\r\n          className={f('input', 'case2')}\r\n          type=\"text\"\r\n          maxLength={2}\r\n          placeholder={`Type route here, ${placeholder}`}\r\n          value={route}\r\n          onChange={handleChange}\r\n        />\r\n        <button className={f('button')} type=\"submit\">ENTER</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nFormWithStops.propTypes = {\r\n  onEnter: PropTypes.func.isRequired,\r\n  description: PropTypes.string.isRequired,\r\n  placeholder: PropTypes.string,\r\n};\r\n\r\nFormWithStops.defaultProps = {\r\n  placeholder: '',\r\n};\r\n\r\nexport default FormWithStops;\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { block } from 'bem-cn';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Stats, TaskDescription } from '..';\r\n\r\nimport { asyncSetInfo } from '../../redux/actions/actions';\r\n\r\nimport './Header.css';\r\n\r\nconst b = block('header');\r\n\r\nfunction Header({\r\n  title, city, temperature, rate, setInfo,\r\n}) {\r\n  const [isShowingPdf, setShowingPdf] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setInfo();\r\n  }, [setInfo]);\r\n\r\n  return (\r\n    <div className={b()}>\r\n      <Stats />\r\n      <div className={b('title-panel')}>\r\n        <div className={`${b('info')} ${b('info-rate')}`}>\r\n          <div className={b('info-rate-first-line')}>USD/RUB</div>\r\n          <div>{rate}</div>\r\n        </div>\r\n        <h1 className={b('title')}>{title}</h1>\r\n        <div className={`${b('info')} ${b('info-weather')}`}>\r\n          <div>{city}</div>\r\n          <div>\r\n            {temperature}\r\n            °C\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className={b('button-container')}>\r\n        <button\r\n          className={b('button')}\r\n          onClick={() => { setShowingPdf(true); }}\r\n          type=\"button\"\r\n        >\r\n          What is this service for?\r\n        </button>\r\n      </div>\r\n      <TaskDescription isShowingPdf={isShowingPdf} onClose={() => { setShowingPdf(false); }} />\r\n    </div>\r\n  );\r\n}\r\n\r\nHeader.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  rate: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n  ]).isRequired,\r\n  city: PropTypes.string.isRequired,\r\n  temperature: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n  ]).isRequired,\r\n  setInfo: PropTypes.func.isRequired,\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    rate: state.info.rate,\r\n    city: state.info.city,\r\n    temperature: state.info.temperature,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    setInfo: () => dispatch(asyncSetInfo()),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","import React, { useRef } from 'react';\r\nimport lottie from 'lottie-web';\r\nimport { block } from 'bem-cn';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport trainAnimation from './train-animation.json';\r\n\r\nimport './Loader.css';\r\n\r\nconst l = block('loader');\r\n\r\nfunction Loader({ isInfoLoading }) {\r\n  const element = useRef(null);\r\n  const isAppLoading = isInfoLoading;\r\n\r\n  const mountAnimation = () => {\r\n    if (element && element.current) {\r\n      lottie.loadAnimation({\r\n        container: element.current,\r\n        renderer: 'svg',\r\n        loop: true,\r\n        autoplay: true,\r\n        animationData: trainAnimation,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CSSTransition\r\n      in={isAppLoading}\r\n      timeout={200}\r\n      classNames={l()}\r\n      onEnter={mountAnimation}\r\n      unmountOnExit\r\n    >\r\n      <div className={l('backdrop')}>\r\n        <div className={l('animation')} ref={element} />\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n}\r\n\r\nLoader.propTypes = {\r\n  isInfoLoading: PropTypes.bool.isRequired,\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    isInfoLoading: state.info.isInfoLoading,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Loader);\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { block } from 'bem-cn';\n\nimport './Route.css';\n\nconst r = block('route');\n\nfunction Route({ start, end, cost }) {\n  return (\n    <li className={r()}>\n      <div className={r('start')}>{start}</div>\n      <div className={r('end')}>{end}</div>\n      <div>{cost}</div>\n    </li>\n  );\n}\n\nRoute.propTypes = {\n  start: PropTypes.string.isRequired,\n  end: PropTypes.string.isRequired,\n  cost: PropTypes.number.isRequired,\n};\n\nexport default Route;\n","class Edge {\r\n  constructor(id, start = ' ', end = ' ', weight = ' ') {\r\n    this.id = id;\r\n    this.start = start.replace(/[^A-Z]/, '*');\r\n    this.end = end.replace(/[^A-Z]/, '*');\r\n    this.weight = weight.match(/^\\d+$/) ? parseInt(weight, 10) : '*';\r\n  }\r\n}\r\n\r\nexport default Edge;\r\n","import find from 'lodash/find';\r\nimport pull from 'lodash/pull';\r\nimport min from 'lodash/min';\r\n\r\nclass Graph {\r\n  constructor(edges) {\r\n    const initialVertexes = (edges) => {\r\n      const result = [];\r\n      edges.forEach((edge) => {\r\n        if (result.indexOf(edge.start) === -1) result.push(edge.start);\r\n        if (result.indexOf(edge.end) === -1) result.push(edge.end);\r\n      })\r\n      return result;\r\n    }\r\n    this.edges = edges;\r\n    this.vertexes = initialVertexes(edges);\r\n  }\r\n\r\n  dijkstra(fromPoint, toPoint) {\r\n    const distances = {};\r\n    const previous = {};\r\n    let discussingVertexes = [];\r\n    discussingVertexes = this.vertexes.map((vertex) => {\r\n      distances[vertex] = Infinity;\r\n      previous[vertex] = null;\r\n      return vertex;\r\n    });\r\n    distances[fromPoint] = 0;\r\n    while (discussingVertexes.length > 0) {\r\n      let currentMinValue = Infinity;\r\n      let currentVertex = null;\r\n      for (let i = 0; i < discussingVertexes.length; i += 1) {\r\n        if (distances[discussingVertexes[i]] < currentMinValue) {\r\n          currentVertex = discussingVertexes[i];\r\n          currentMinValue = distances[currentVertex];\r\n        }\r\n      }\r\n      if (currentVertex === toPoint) {\r\n        break;\r\n      }\r\n      pull(discussingVertexes, currentVertex);\r\n      this.edges.filter(edge => edge.start === currentVertex).forEach((edge) => {\r\n        const alternativeDistance = distances[currentVertex] + edge.weight;\r\n        if (alternativeDistance < distances[edge.end]) {\r\n          distances[edge.end] = alternativeDistance;\r\n          previous[edge.end] = currentVertex;\r\n        }\r\n      });\r\n    }\r\n    return distances[toPoint];\r\n  }\r\n\r\n  findBestPath(route) {\r\n    const start = route.charAt(0);\r\n    const end = route.charAt(1);\r\n    if (this.vertexes.indexOf(start) === -1 || this.vertexes.indexOf(end) === -1) {\r\n      return `${route}: NO SUCH ROUTE`;\r\n    }\r\n    const routesWithSuitableStart = this.edges.filter(edge => edge.start === start);\r\n    const pricesOfSuitableStarts = routesWithSuitableStart\r\n      .map(edge => edge.weight + this.dijkstra(edge.end, end));\r\n    const bestPath = min(pricesOfSuitableStarts);\r\n    return bestPath ? `The cost of cheapest delivery on the route ${route} is ${bestPath}` : `${route}: NO SUCH ROUTE`;\r\n  }\r\n\r\n\r\n  countPathWeight(path) {\r\n    const stopsArray = path.split('');\r\n    let weight = 0;\r\n    for (let i = 0; i < stopsArray.length - 1; i += 1) {\r\n      const pointA = stopsArray[i];\r\n      const pointB = stopsArray[i + 1];\r\n      const suitableZone = find(this.edges, edge => edge.start === pointA && edge.end === pointB);\r\n      if (suitableZone) {\r\n        weight += suitableZone.weight;\r\n      } else {\r\n        weight = -1;\r\n        break;\r\n      }\r\n    }\r\n    return (weight === -1) ? `${path}: NO SUCH ROUTE` : `The cost of route ${path} is ${weight}`;\r\n  }\r\n\r\n\r\n  countTrips(passedWay, currentPoint, finishPoint, ceiling) {\r\n    if (currentPoint === finishPoint && passedWay.length <= ceiling && passedWay.length !== 0) {\r\n      return 1;\r\n    } if (passedWay.length > ceiling) {\r\n      return 0;\r\n    }\r\n    const passedWayWithCurrentPoint = [...passedWay, currentPoint];\r\n    return this.edges\r\n      .filter(edge => edge.start === currentPoint)\r\n      .reduce(\r\n        (sum, edge) => sum + this.countTrips(passedWayWithCurrentPoint, edge.end, finishPoint, ceiling),\r\n        0,\r\n      );\r\n  }\r\n\r\n  countTripsWithLessThanNStops(route, maxStops) {\r\n    const start = route.charAt(0);\r\n    const end = route.charAt(1);\r\n    if (this.vertexes.indexOf(start) === -1 || this.vertexes.indexOf(end) === -1) {\r\n      return `${route}: NO SUCH ROUTE`;\r\n    }\r\n    return `The number of possible delivery of route ${route} with a maximum\r\n        of ${maxStops} stops is ${this.countTrips([], start, end, maxStops)}`;\r\n  }\r\n}\r\n\r\nexport default Graph;\r\n","import Edge from '../models/Edge';\r\nimport Graph from '../models/Graph';\r\n\r\nconst parser = (data) => {\r\n  const normalizeNodesIds = (nodes) => {\r\n    let id = 1;\r\n    return nodes.map(node => ({ ...node, id: id++ }))\r\n  }\r\n  let id = 0;\r\n  const edges = data.split(',')\r\n    .map(route => new Edge(id += 1, route[0], route[1], route.substring(2)));\r\n  let correctParsedEdges = edges.filter((node) => node.start !== '*' && node.end !== '*' && node.weight !== '*');\r\n  const isValueWronglyParsed = !(edges.length === correctParsedEdges.length);\r\n  if (isValueWronglyParsed) {\r\n    correctParsedEdges = normalizeNodesIds(correctParsedEdges);\r\n  }\r\n  const graph = new Graph(correctParsedEdges);\r\n\r\n  return { graph, isValueWronglyParsed };\r\n};\r\n\r\nexport default parser;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { block } from 'bem-cn';\r\n\r\nimport { Route, Form } from '..';\r\n\r\nimport { resetGraph, setGraph } from '../../redux/actions/actions';\r\nimport parser from '../../helpers/parser';\r\nimport Graph from '../../models/Graph';\r\n\r\nimport './RoutesList.css';\r\n\r\nconst wp = block('warning-panel');\r\nconst rl = block('routes-list');\r\n\r\nfunction RoutesList({\r\n  enteredLine, graph: { edges }, isWronglyParsed, onSubmit, onReset,\r\n}) {\r\n  const atLeastOneEdge = edges.length > 0;\r\n\r\n  const onEnter = (value) => {\r\n    const { graph, isValueWronglyParsed } = parser(value);\r\n    onSubmit(graph, value, isValueWronglyParsed);\r\n  };\r\n\r\n  return (\r\n    <div className={rl()}>\r\n      <Form\r\n        onEnter={onEnter}\r\n        description=\"Enter all available routes(comma-separated, e.g. 'AB1,BF4,FE7')\"\r\n        placeholder=\"e.g. 'AB1,BF4,FE7'\"\r\n      />\r\n      {isWronglyParsed && (\r\n        <div className={wp()}>\r\n          <div className={wp('header')}>\r\n            Some entered routes were parsed not correct. Please, check correctness of your input.\r\n          </div>\r\n          {atLeastOneEdge && (\r\n            <div className={wp('advice')}>\r\n              Successfully processed routes are available for further work. Have a good Journey!\r\n            </div>\r\n          )}\r\n          <div className={wp('line')}>\r\n            {enteredLine}\r\n          </div>\r\n        </div>\r\n      )}\r\n      {atLeastOneEdge && (\r\n        <div>\r\n          <div className={rl('show-part')}>\r\n            <div className={rl('title-line')}>\r\n              <div className={rl('title')}>\r\n                Available Routes List\r\n              </div>\r\n              <button\r\n                className={rl('button')}\r\n                onClick={onReset}\r\n                type=\"button\"\r\n              >\r\n                Reset Routes List\r\n              </button>\r\n            </div>\r\n            <ul className={rl('container')}>\r\n              {\r\n                edges.map((edge) => (\r\n                  <Route\r\n                    key={edge.id}\r\n                    id={edge.id}\r\n                    start={edge.start}\r\n                    end={edge.end}\r\n                    cost={edge.weight}\r\n                  />\r\n                ))\r\n              }\r\n            </ul>\r\n\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nRoutesList.propTypes = {\r\n  graph: PropTypes.shape({\r\n    edges: PropTypes.arrayOf(PropTypes.any),\r\n    vertexes: PropTypes.arrayOf(PropTypes.any),\r\n  }),\r\n  isWronglyParsed: PropTypes.bool.isRequired,\r\n  onSubmit: PropTypes.func.isRequired,\r\n  onReset: PropTypes.func.isRequired,\r\n  enteredLine: PropTypes.string,\r\n};\r\n\r\nRoutesList.defaultProps = {\r\n  graph: {\r\n    edges: [],\r\n    vertexes: [],\r\n  },\r\n  enteredLine: '',\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    graph: state.graph,\r\n    enteredLine: state.userInput.enteredLine,\r\n    isWronglyParsed: state.userInput.isWronglyParsed,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onReset: () => dispatch(resetGraph()),\r\n    onSubmit: (graph, enteredLine, isWronglyParsed) => dispatch(setGraph(graph, enteredLine, isWronglyParsed)),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RoutesList);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { block } from 'bem-cn';\r\n\r\nimport './Stats.css';\r\n\r\nconst s = block('stats');\r\n\r\nfunction Stats({ graph: { edges, vertexes } }) {\r\n  const routes = edges.length;\r\n  const cities = vertexes.length;\r\n  return (\r\n    <div className={s()}>\r\n      <div className={s('row')}>\r\n        <div className={s('name')}>ROUTES AVAILABLE:</div>\r\n        <div className={s('value')}>{routes}</div>\r\n      </div>\r\n      <div className={s('row')}>\r\n        <div className={s('name')}>CITIES COVERED:</div>\r\n        <div className={s('value')}>{cities}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nStats.propTypes = {\r\n  graph: PropTypes.shape({\r\n    edges: PropTypes.arrayOf(PropTypes.any),\r\n    vertexes: PropTypes.arrayOf(PropTypes.any),\r\n  }),\r\n};\r\n\r\nStats.defaultProps = {\r\n  graph: {\r\n    edges: [],\r\n    vertexes: [],\r\n  },\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    graph: state.graph,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Stats);\r\n","import React from 'react';\r\nimport { block } from 'bem-cn';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport taskPdf from './task.pdf';\r\n\r\nimport './TaskDescription.css';\r\n\r\nconst l = block('task-description');\r\n\r\nfunction TaskDescription({ isShowingPdf, onClose }) {\r\n  return (\r\n    <CSSTransition\r\n      in={isShowingPdf}\r\n      timeout={200}\r\n      classNames={l()}\r\n      unmountOnExit\r\n    >\r\n      <div className={l('backdrop')}>\r\n        <button\r\n          className={l('button')}\r\n          onClick={onClose}\r\n          type=\"button\"\r\n        >\r\n          Got it!\r\n        </button>\r\n        <iframe src={taskPdf} title=\"_blank\" width=\"100%\" height=\"100%\" />\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n}\r\n\r\nTaskDescription.propTypes = {\r\n  isShowingPdf: PropTypes.bool.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default TaskDescription;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { block } from 'bem-cn';\r\n\r\nimport { Form } from '../..';\r\n\r\nconst r = block('result');\r\n\r\nfunction CaseOne({ graph, caseInfo }) {\r\n  const [calculatingRoute, setCalculatingRoute] = useState('');\r\n\r\n  const handleEnter = (route) => {\r\n    setCalculatingRoute(route.toUpperCase());\r\n  };\r\n\r\n  const calculateCost = (route) => graph.countPathWeight(route);\r\n\r\n  const handleReset = () => {\r\n    setCalculatingRoute('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2 className=\"text-with-indent\">CaseOne. The delivery cost of route.</h2>\r\n      <Form\r\n        caseForm\r\n        onEnter={handleEnter}\r\n        description={caseInfo.description}\r\n        placeholder={caseInfo.placeholder}\r\n      />\r\n      <div>\r\n        {calculatingRoute && (\r\n          <div className={r()}>\r\n            <div className={r('text')}>{calculateCost(calculatingRoute)}</div>\r\n            <button\r\n              className={r('reset-button')}\r\n              onClick={handleReset}\r\n              type=\"button\"\r\n            >\r\n              RESET THE LAST COUNTED ROUTE\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nCaseOne.propTypes = {\r\n  graph: PropTypes.shape({\r\n    edges: PropTypes.arrayOf(PropTypes.any).isRequired,\r\n    vertexes: PropTypes.arrayOf(PropTypes.any).isRequired,\r\n    countPathWeight: PropTypes.func,\r\n  }).isRequired,\r\n  caseInfo: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    description: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default CaseOne;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { block } from 'bem-cn';\r\n\r\nimport { FormWithStops } from '../..';\r\n\r\nconst r = block('result');\r\n\r\nfunction CaseTwo({ graph, caseInfo }) {\r\n  const [calculatingRoute, setCalculatingRoute] = useState('');\r\n  const [calculatingStops, setCalculatingStops] = useState('');\r\n\r\n  const handleEnter = (route, stops) => {\r\n    setCalculatingRoute(route.toUpperCase());\r\n    setCalculatingStops(stops);\r\n  };\r\n\r\n  const calculateDeliveryAmount = (route, stops) => graph.countTripsWithLessThanNStops(route, Number(stops));\r\n\r\n  const handleReset = () => {\r\n    setCalculatingRoute('');\r\n    setCalculatingStops('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2 className=\"text-with-indent\">\r\n        CaseTwo. The number of possible delivery route that can be construct by the given conditions.\r\n      </h2>\r\n      <FormWithStops\r\n        onEnter={handleEnter}\r\n        description={caseInfo.description}\r\n        placeholder={caseInfo.placeholder}\r\n      />\r\n      <div>\r\n        {calculatingRoute && calculatingStops && (\r\n          <div className={r()}>\r\n            <div className={r('text')}>\r\n              {calculateDeliveryAmount(calculatingRoute, calculatingStops)}\r\n            </div>\r\n            <button\r\n              className={r('reset-button')}\r\n              onClick={handleReset}\r\n              type=\"button\"\r\n            >\r\n              RESET THE LAST COUNTED ROUTE AND STOPS AMOUNT\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nCaseTwo.propTypes = {\r\n  graph: PropTypes.shape({\r\n    edges: PropTypes.arrayOf(PropTypes.any).isRequired,\r\n    vertexes: PropTypes.arrayOf(PropTypes.any).isRequired,\r\n    countTripsWithLessThanNStops: PropTypes.func,\r\n  }).isRequired,\r\n  caseInfo: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    description: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default CaseTwo;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { block } from 'bem-cn';\r\n\r\nimport { Form } from '../..';\r\n\r\nconst r = block('result');\r\n\r\nfunction CaseThree({ graph, caseInfo }) {\r\n  const [calculatingRoute, setCalculatingRoute] = useState('');\r\n\r\n  const handleEnter = (route) => {\r\n    setCalculatingRoute(route.toUpperCase());\r\n  };\r\n\r\n  const calculateCheapestCost = (route) => graph.findBestPath(route);\r\n\r\n  const handleReset = () => {\r\n    setCalculatingRoute('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2 className=\"text-with-indent\">CaseThree. The cheapest delivery route between two towns.</h2>\r\n      <Form\r\n        caseForm\r\n        caseAB\r\n        onEnter={handleEnter}\r\n        description={caseInfo.description}\r\n        placeholder={caseInfo.placeholder}\r\n      />\r\n      <div>\r\n        {calculatingRoute && (\r\n          <div className={r()}>\r\n            <div className={r('text')}>{calculateCheapestCost(calculatingRoute)}</div>\r\n            <button\r\n              className={r('reset-button')}\r\n              onClick={handleReset}\r\n              type=\"button\"\r\n            >\r\n              RESET THE LAST COUNTED ROUTE\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nCaseThree.propTypes = {\r\n  graph: PropTypes.shape({\r\n    edges: PropTypes.arrayOf(PropTypes.any).isRequired,\r\n    vertexes: PropTypes.arrayOf(PropTypes.any).isRequired,\r\n    findBestPath: PropTypes.func,\r\n  }).isRequired,\r\n  caseInfo: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    description: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default CaseThree;\r\n","const caseData = [\r\n  {\r\n    id: 'case1',\r\n    name: 'CaseOne',\r\n    title: 'The delivery cost of route.',\r\n    description: 'Enter the route to calcualte the cost of delivery. Only latin letters allowed (e.g. \"ABC\", \"ADEF\")',\r\n    placeholder: 'e.g. \"ABC\", \"ADEF\"',\r\n  },\r\n  {\r\n    id: 'case2',\r\n    name: 'CaseTwo',\r\n    title: 'The number of possible delivery route.',\r\n    description: 'Enter the first, the end points of route(only latin letters allowed, e.g. \"AB\", \"EF\") and maximum amount of stops(only numbers allowed, e.g. \"5\", \"17\").',\r\n    placeholder: 'e.g. \"AB\", \"EF\"',\r\n  },\r\n  {\r\n    id: 'case3',\r\n    name: 'CaseThree',\r\n    title: 'The cheapest delivery route between two towns.',\r\n    description: 'Enter the first and the end points of route. Only latin letters allowed (e.g. \"AB\", \"EF\")',\r\n    placeholder: 'e.g. \"AB\", \"EF\"',\r\n  },\r\n];\r\n\r\nexport default caseData;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { CaseOne, CaseTwo, CaseThree } from './Cases';\r\nimport { CaseLabel } from '..';\r\n\r\nimport './Workspace.css';\r\nimport './Cases.css';\r\n\r\nimport caseData from './case-data';\r\n\r\nfunction Workspace({ currentCase, graph }) {\r\n  const renderCurrentCase = (curCase) => {\r\n    switch (curCase) {\r\n      case 'case1': return <CaseOne graph={graph} caseInfo={caseData[0]} />;\r\n      case 'case2': return <CaseTwo graph={graph} caseInfo={caseData[1]} />;\r\n      case 'case3': return <CaseThree graph={graph} caseInfo={caseData[2]} />;\r\n      default: return <div />;\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"workspace\">\r\n      <ul className=\"case-label-container\">\r\n        {\r\n          caseData.map((caseItem) => (\r\n            <CaseLabel\r\n              key={caseItem.id}\r\n              caseItem={caseItem}\r\n              isChecked={currentCase === caseItem.id}\r\n            />\r\n          ))\r\n        }\r\n      </ul>\r\n      {renderCurrentCase(currentCase)}\r\n    </div>\r\n  );\r\n}\r\n\r\nWorkspace.propTypes = {\r\n  currentCase: PropTypes.string.isRequired,\r\n  graph: PropTypes.shape({\r\n    edges: PropTypes.arrayOf(PropTypes.any).isRequired,\r\n    vertexes: PropTypes.arrayOf(PropTypes.any).isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    graph: state.graph,\r\n    currentCase: state.currentCase,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Workspace);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {\r\n  Header, Content, Footer, Loader,\r\n} from './components';\r\n\r\nimport './index.css';\r\n\r\nfunction App({ title }) {\r\n  return (\r\n    <div className=\"main\">\r\n      <Loader />\r\n      <Header title={title} />\r\n      <Content />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nApp.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default App;\r\n","import Graph from '../../models/Graph';\r\n\r\nconst initialState = new Graph([]);\r\n\r\nexport default function graph(state = initialState, action) {\r\n  switch (action.type) {\r\n    case 'SET_GRAPH': {\r\n      const { graph } = action.payload;\r\n      return graph;\r\n    }\r\n    case 'RESET_GRAPH': {\r\n      return new Graph([]);\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}","const initialState = { enteredLine: '', isWronglyParsed: false };\r\n\r\nexport default function userInput(state = initialState, action) {\r\n  switch (action.type) {\r\n    case 'SET_GRAPH': {\r\n      const { enteredLine, isWronglyParsed } = action.payload;\r\n      return { enteredLine, isWronglyParsed };\r\n    }\r\n    case 'RESET_GRAPH': {\r\n      return { enteredLine: '', isWronglyParsed: false };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}","const initialState = { city: '', temperature: '', rate: '', isInfoLoading: false };\r\n\r\nexport default function info(state = initialState, action) {\r\n  switch (action.type) {\r\n    case 'SET_TEMPERATURE': {\r\n      const { city, temperature } = action.payload;\r\n      return { ...state, city, temperature };\r\n    }\r\n    case 'SET_RATE': {\r\n      const { rate } = action.payload;\r\n      return { ...state, rate };\r\n    }\r\n    case 'SET_INFO_LOADING': {\r\n      const { isInfoLoading } = action.payload;\r\n      return { ...state, isInfoLoading };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}","import {combineReducers} from 'redux';\r\nimport graph from './reducers/graph';\r\nimport userInput from './reducers/userInput';\r\nimport currentCase from './reducers/currentCase';\r\nimport info from './reducers/info';\r\n\r\nexport default combineReducers({ graph, userInput, currentCase, info });","const initialState = '';\r\n\r\nexport default function currentCase(state = initialState, action) {\r\n  switch (action.type) {\r\n    case 'SET_GRAPH': {\r\n      return '';\r\n    }\r\n    case 'RESET_GRAPH': {\r\n      return '';\r\n    }\r\n    case 'SET_CASE': {\r\n      const { currentCase } = action.payload;\r\n      return currentCase;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport App from './App';\r\n\r\nimport rootReducer from './redux/rootReducer';\r\n\r\nimport './index.css';\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App title=\"Eko​ ​Delivery​ ​Service\" />\r\n  </Provider>, \r\n  document.getElementById('root')\r\n);\r\n","module.exports = __webpack_public_path__ + \"static/media/task.0b33b592.pdf\";"],"sourceRoot":""}